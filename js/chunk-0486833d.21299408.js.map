{"version":3,"sources":["webpack:///../../../src/components/VList/VList.ts","webpack:///../../../src/components/VList/VListItem.ts"],"names":["name","provide","isInList","list","this","inject","isInMenu","default","isInNav","props","dense","disabled","expand","flat","nav","rounded","shaped","subheader","threeLine","tile","type","twoLine","Boolean","data","groups","computed","classes","methods","register","unregister","index","findIndex","g","content","splice","listClick","group","render","staticClass","class","style","attrs","role","attrs$","h","setBackgroundColor","$slots","baseMixins","directives","Ripple","inheritAttrs","isInGroup","activeClass","listItemGroup","inactive","link","selectable","tag","value","proxyClass","isClickable","themeClasses","created","$attrs","hasOwnProperty","click","e","$el","blur","genAttrs","tabindex","String","keydown","children","$scopedSlots","active","toggle","setTextColor"],"mappings":"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","file":"js/chunk-0486833d.21299408.js","sourcesContent":["// Styles\nimport './VList.sass'\nimport VListGroup from './VListGroup'\n\n// Components\nimport VSheet from '../VSheet/VSheet'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VListGroupInstance = InstanceType<typeof VListGroup>\n\ninterface options extends InstanceType<typeof VSheet> {\n  isInMenu: boolean\n  isInNav: boolean\n}\n\n/* @vue/component */\nexport default VSheet.extend<options>().extend({\n  name: 'v-list',\n\n  provide (): object {\n    return {\n      isInList: true,\n      list: this,\n    }\n  },\n\n  inject: {\n    isInMenu: {\n      default: false,\n    },\n    isInNav: {\n      default: false,\n    },\n  },\n\n  props: {\n    dense: Boolean,\n    disabled: Boolean,\n    expand: Boolean,\n    flat: Boolean,\n    nav: Boolean,\n    rounded: Boolean,\n    shaped: Boolean,\n    subheader: Boolean,\n    threeLine: Boolean,\n    tile: {\n      type: Boolean,\n      default: true,\n    },\n    twoLine: Boolean,\n  },\n\n  data: () => ({\n    groups: [] as VListGroupInstance[],\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSheet.options.computed.classes.call(this),\n        'v-list--dense': this.dense,\n        'v-list--disabled': this.disabled,\n        'v-list--flat': this.flat,\n        'v-list--nav': this.nav,\n        'v-list--rounded': this.rounded,\n        'v-list--shaped': this.shaped,\n        'v-list--subheader': this.subheader,\n        'v-list--two-line': this.twoLine,\n        'v-list--three-line': this.threeLine,\n      }\n    },\n  },\n\n  methods: {\n    register (content: VListGroupInstance) {\n      this.groups.push(content)\n    },\n    unregister (content: VListGroupInstance) {\n      const index = this.groups.findIndex(g => g._uid === content._uid)\n\n      if (index > -1) this.groups.splice(index, 1)\n    },\n    listClick (uid: number) {\n      if (this.expand) return\n\n      for (const group of this.groups) {\n        group.toggle(uid)\n      }\n    },\n  },\n\n  render (h): VNode {\n    const data = {\n      staticClass: 'v-list',\n      class: this.classes,\n      style: this.styles,\n      attrs: {\n        role: this.isInNav || this.isInMenu ? undefined : 'list',\n        ...this.attrs$,\n      },\n    }\n\n    return h(this.tag, this.setBackgroundColor(this.color, data), [this.$slots.default])\n  },\n})\n","// Styles\nimport './VListItem.sass'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport Routable from '../../mixins/routable'\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport Themeable from '../../mixins/themeable'\nimport { factory as ToggleableFactory } from '../../mixins/toggleable'\n\n// Directives\nimport Ripple from '../../directives/ripple'\n\n// Utilities\nimport { keyCodes } from './../../util/helpers'\nimport { ExtractVue } from './../../util/mixins'\nimport { removed } from '../../util/console'\n\n// Types\nimport mixins from '../../util/mixins'\nimport { VNode } from 'vue'\nimport { PropType, PropValidator } from 'vue/types/options'\n\nconst baseMixins = mixins(\n  Colorable,\n  Routable,\n  Themeable,\n  GroupableFactory('listItemGroup'),\n  ToggleableFactory('inputValue')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  isInGroup: boolean\n  isInList: boolean\n  isInMenu: boolean\n  isInNav: boolean\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-list-item',\n\n  directives: {\n    Ripple,\n  },\n\n  inheritAttrs: false,\n\n  inject: {\n    isInGroup: {\n      default: false,\n    },\n    isInList: {\n      default: false,\n    },\n    isInMenu: {\n      default: false,\n    },\n    isInNav: {\n      default: false,\n    },\n  },\n\n  props: {\n    activeClass: {\n      type: String,\n      default (): string | undefined {\n        if (!this.listItemGroup) return ''\n\n        return this.listItemGroup.activeClass\n      },\n    } as any as PropValidator<string>,\n    dense: Boolean,\n    inactive: Boolean,\n    link: Boolean,\n    selectable: {\n      type: Boolean,\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n    threeLine: Boolean,\n    twoLine: Boolean,\n    value: null as any as PropType<any>,\n  },\n\n  data: () => ({\n    proxyClass: 'v-list-item--active',\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-list-item': true,\n        ...Routable.options.computed.classes.call(this),\n        'v-list-item--dense': this.dense,\n        'v-list-item--disabled': this.disabled,\n        'v-list-item--link': this.isClickable && !this.inactive,\n        'v-list-item--selectable': this.selectable,\n        'v-list-item--three-line': this.threeLine,\n        'v-list-item--two-line': this.twoLine,\n        ...this.themeClasses,\n      }\n    },\n    isClickable (): boolean {\n      return Boolean(\n        Routable.options.computed.isClickable.call(this) ||\n        this.listItemGroup\n      )\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('avatar')) {\n      removed('avatar', this)\n    }\n  },\n\n  methods: {\n    click (e: MouseEvent | KeyboardEvent) {\n      if (e.detail) this.$el.blur()\n\n      this.$emit('click', e)\n\n      this.to || this.toggle()\n    },\n    genAttrs () {\n      const attrs: Record<string, any> = {\n        'aria-disabled': this.disabled ? true : undefined,\n        tabindex: this.isClickable && !this.disabled ? 0 : -1,\n        ...this.$attrs,\n      }\n\n      if (this.$attrs.hasOwnProperty('role')) {\n        // do nothing, role already provided\n      } else if (this.isInNav) {\n        // do nothing, role is inherit\n      } else if (this.isInGroup) {\n        attrs.role = 'listitem'\n        attrs['aria-selected'] = String(this.isActive)\n      } else if (this.isInMenu) {\n        attrs.role = this.isClickable ? 'menuitem' : undefined\n        attrs.id = attrs.id || `list-item-${this._uid}`\n      } else if (this.isInList) {\n        attrs.role = 'listitem'\n      }\n\n      return attrs\n    },\n  },\n\n  render (h): VNode {\n    let { tag, data } = this.generateRouteLink()\n\n    data.attrs = {\n      ...data.attrs,\n      ...this.genAttrs(),\n    }\n    data.on = {\n      ...data.on,\n      click: this.click,\n      keydown: (e: KeyboardEvent) => {\n        /* istanbul ignore else */\n        if (e.keyCode === keyCodes.enter) this.click(e)\n\n        this.$emit('keydown', e)\n      },\n    }\n\n    const children = this.$scopedSlots.default\n      ? this.$scopedSlots.default({\n        active: this.isActive,\n        toggle: this.toggle,\n      })\n      : this.$slots.default\n\n    tag = this.inactive ? 'div' : tag\n\n    return h(tag, this.setTextColor(this.color, data), children)\n  },\n})\n"],"sourceRoot":""}